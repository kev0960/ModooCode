(()=>{var e={778:()=>{window.onGoogleLogin=function(e){fetch("/auth/goog",{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({token:e.credential})}).then((function(e){console.log(e),location.reload()}))}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}(()=>{"use strict";var e=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function c(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,c)}l((o=o.apply(e,t||[])).next())}))},t=function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(l){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(a=0)),a;)try{if(n=1,o&&(r=2&c[0]?o.return:c[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,c[1])).done)return r;switch(o=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,o=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){a.label=c[1];break}if(6===c[0]&&a.label<r[1]){a.label=r[1],r=c;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(c);break}r[2]&&a.ops.pop(),a.trys.pop();continue}c=t.call(e,a)}catch(e){c=[6,e],o=0}finally{n=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}},o=function(){function n(){this.last_comment_index_=0,this.comments_=new Map,this.root_comments_=[],this.num_total_comments_=getNumTotalComments()}return n.prototype.LoadComments=function(){return e(this,void 0,void 0,(function(){var e,n,o,r,i,a,c;return t(this,(function(t){switch(t.label){case 0:return e=window.location.pathname,n=e.substr(e.lastIndexOf("/")+1),[4,fetch("/get-comment",{method:"POST",mode:"cors",cache:"no-cache",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({article_url:n,index_start:this.last_comment_index_})})];case 1:return[4,t.sent().json()];case 2:for(o=t.sent(),r=o.comments,i=0,a=r;i<a.length;i++)c=a[i],this.comments_.set(c.comment_id,c);return this.last_comment_index_+=50,[2]}}))}))},n.prototype.PostComment=function(n,o,r,i){return e(this,void 0,void 0,(function(){var e,a;return t(this,(function(t){return e=window.location.href,a=e.substr(e.lastIndexOf("/")+1),grecaptcha.ready((function(){grecaptcha.execute("6LeE_nYUAAAAAGm9qTa71IwvvayWV9Q7flqNkto2",{action:"Comment"}).then((function(e){fetch("/write-comment",{method:"POST",mode:"cors",cache:"no-cache",headers:{"Content-Type":"application/json"},body:JSON.stringify({parent_id:i,content:n,password:o||"",author_name:r,article_url:a,captcha_token:e})}).then((function(e){console.log(e),document.getElementById("adding-comment").hidden=!0,location.reload()}))}))})),[2]}))}))},n.prototype.ComputeRootComments=function(){var e=Array.from(this.comments_.keys()).sort((function(e,t){return e-t})),t=new Set;this.root_comments_=[];for(var n=0,o=e;n<o.length;n++){var r=o[n];t.has(r)||(this.root_comments_.push(this.comments_.get(r)),this.VisitAllChildComments(r,t))}this.root_comments_=this.root_comments_.reverse()},n.prototype.VisitAllChildComments=function(e,t){var n=this.comments_.get(e);if(n){t.add(e);for(var o=0,r=n.reply_ids||[];o<r.length;o++){var i=r[o];this.VisitAllChildComments(i,t)}}},n.prototype.CreateCommentList=function(){var e=document.createElement("ul");e.classList.add("comment-list"),e.id="root-comment-list";for(var t=0,n=this.root_comments_;t<n.length;t++)for(var o=n[t],r=0,i=this.CreateComment(o.comment_id);r<i.length;r++){var a=i[r];e.appendChild(a)}return e},n.prototype.CreateComment=function(e){var t,n=this,o=this.comments_.get(e);if(o){var r=document.createElement("li");r.classList.add("comment");var i=document.createElement("div");i.classList.add("comment-profile");var a=document.createElement("img");o.image_link?(a.src=o.image_link,a.alt="프로필 사진"):(a.src="./img/unknown_person.png",a.alt="프로필 사진 없음"),i.appendChild(a),r.appendChild(i);var c=document.createElement("div");c.classList.add("comment-info");var l=document.createElement("div");l.classList.add("comment-header");var s=function(e,t){var n=document.createElement("span");return n.classList.add(e),n.textContent=t,n};l.appendChild(s("comment-author",o.author_name||"")),l.appendChild(s("comment-date",o.comment_date||"")),c.appendChild(l);var m=document.createElement("div");m.classList.add("comment-content"),m.textContent=o.content,c.appendChild(m);var d=document.createElement("div");d.classList.add("comment-action"),d.id="comment-id-"+e;var u=s("comment-reply","답글 달기");u.onclick=function(){n.CreateCommentReply(e)},d.appendChild(u);var h=s("comment-delete","답글 삭제");if(d.appendChild(h),c.appendChild(d),r.appendChild(c),!(null===(t=o.reply_ids)||void 0===t?void 0:t.length))return[r];var p=document.createElement("ul");p.classList.add("comment-list");for(var _=0,f=o.reply_ids;_<f.length;_++)for(var v=f[_],g=0,y=this.CreateComment(v);g<y.length;g++){var C=y[g];p.append(C)}return[r,p]}},n.prototype.GetNumTotalComments=function(){return this.num_total_comments_},n.prototype.GetLastCommentIndex=function(){return this.last_comment_index_},n.prototype.CreateCommentReply=function(e){var t=this;this.current_reply_comment_box&&this.current_reply_comment_box.remove();var n=document.getElementById("comment-post-section").cloneNode(!0);n.id="reply-post-section",document.getElementById("comment-id-"+e).parentElement.parentElement.insertAdjacentElement("afterend",n),n.getElementsByClassName("comment-btn")[0].onclick=function(){var o="",r="";n.getElementsByClassName("comment-box-name").length>0&&(o=n.getElementsByClassName("comment-box-name")[0].value,r=n.getElementsByClassName("comment-box-name")[0].value);var i=n.getElementsByClassName("comment-textarea")[0].value;t.PostComment(i,r,o,e).then((function(e){console.log(e)}))},this.current_reply_comment_box=n},n}(),r=function(){function e(){this.last_position=window.scrollY,this.time_to_update_toc=!0,this.scroll_down_event_handlers=[],this.scroll_up_event_handlers=[],this.InstallScrollEventHandler()}return e.prototype.InstallScrollEventHandler=function(){var e=this;window.addEventListener("scroll",(function(t){e.time_to_update_toc&&(window.requestAnimationFrame((function(){if(e.time_to_update_toc=!0,e.last_position>window.scrollY)for(var t=0,n=e.scroll_up_event_handlers;t<n.length;t++)(0,n[t])();else for(var o=0,r=e.scroll_down_event_handlers;o<r.length;o++)(0,r[o])();e.last_position=window.scrollY})),e.time_to_update_toc=!1)}))},e.prototype.RegisterScrollUpHandler=function(e){this.scroll_up_event_handlers.push(e)},e.prototype.RegisterScrollDownHandler=function(e){this.scroll_down_event_handlers.push(e)},e}();function i(e){for(var t=0;t<e.length&&" "==e[t];t++);return e.substring(t)}var a=function(){function e(){this.toc_headers_=[],this.time_to_update_toc=!0,this.prev_highlighted=0,this.FetchHeaders()}return e.prototype.FetchHeaders=function(){for(var e,t=0,n=document.querySelectorAll(".header-general");t<n.length;t++){var o=n[t],r=i(o.innerText),a="h"!=(e=o.tagName)[0]&&"H"!=e[0]?-1:parseInt(e.substring(1)),c=o.id,l=o.getBoundingClientRect().top+window.scrollY;this.toc_headers_.push({header_name:r,header_tag:a,header_id:c,header_pos:l,header_elem_link:null})}},e.prototype.RecursiveTOCCreator=function(e,t,n){for(var o=null,r=t;r<this.toc_headers_.length;r++){var i=this.toc_headers_[r];if(i.header_tag<n)return r;if(i.header_tag>n){var a=document.createElement("ol");a.className="toc-list",o.appendChild(a),r=this.RecursiveTOCCreator(a,r,i.header_tag),r--}else{var l=c(i);i.header_elem_link=l.firstChild,e.appendChild(l),o=l}}return r},e.prototype.CreateTOCList=function(){var e=document.querySelector(".toc-list");null!=e&&(this.RecursiveTOCCreator(e,0,this.toc_headers_[0].header_tag),this.InstallTOCEventHandlers())},e.prototype.InstallTOCEventHandlers=function(){var e=this;window.addEventListener("scroll",(function(){var t=window.scrollY;e.time_to_update_toc&&(window.requestAnimationFrame((function(){e.time_to_update_toc=!0;var n=e.GetCurrentActiveTOCItem(t);e.HighlightActiveItem(n)})),e.time_to_update_toc=!1)}))},e.prototype.HighlightActiveItem=function(e){this.toc_headers_[this.prev_highlighted].header_elem_link.className="toc-item-link",this.toc_headers_[e].header_elem_link.className="toc-item-link toc-active-item",this.prev_highlighted=e},e.prototype.InstallLinkClickHandler=function(){for(var e=function(e){e.header_elem_link.onclick=function(t){window.scrollTo(0,e.header_pos-150),console.log(e.header_pos-150)}},t=0,n=this.toc_headers_;t<n.length;t++)e(n[t])},e.prototype.GetCurrentActiveTOCItem=function(e){if(e<this.toc_headers_[0].header_pos)return 0;for(var t,n=0;n<this.toc_headers_.length&&n!=this.toc_headers_.length-1;n++)if(this.toc_headers_[n].header_pos<=e&&e<this.toc_headers_[n+1].header_pos)return e-this.toc_headers_[n].header_pos>this.toc_headers_[n+1].header_pos-e&&(void 0,(t=this.toc_headers_[n+1].header_elem_link.getBoundingClientRect()).top>=0&&t.left>=0&&t.right<=(window.innerWidth||document.documentElement.clientWidth)&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight))?n+1:n;return n},e}();function c(e){var t=document.createElement("li");t.className="toc-list-item";var n=document.createElement("span");return n.className="toc-item-link",n.textContent=e.header_name,t.appendChild(n),t}n(778);function l(){return e=this,t=void 0,i=function(){var e;return function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(l){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(a=0)),a;)try{if(n=1,o&&(r=2&c[0]?o.return:c[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,c[1])).done)return r;switch(o=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,o=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){a.label=c[1];break}if(6===c[0]&&a.label<r[1]){a.label=r[1],r=c;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(c);break}r[2]&&a.ops.pop(),a.trys.pop();continue}c=t.call(e,a)}catch(e){c=[6,e],o=0}finally{n=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}}(this,(function(t){switch(t.label){case 0:return(n=new a).CreateTOCList(),n.InstallLinkClickHandler(),(new r).RegisterScrollUpHandler((function(){})),[4,(e=new o).LoadComments()];case 1:return t.sent(),e.ComputeRootComments(),document.getElementById("root-comment-list").replaceWith(e.CreateCommentList()),e.GetNumTotalComments()>=e.GetLastCommentIndex()&&(document.getElementById("button-box").hidden=!1),document.getElementById("post-comment").onclick=function(){var t=document.getElementById("posted-comment").value,n="";document.getElementById("password")&&(n=document.getElementById("password").value);var o="";document.getElementById("name")&&(o=document.getElementById("name").value),e.PostComment(t,n,o).then((function(e){console.log(e)}))},[2]}var n}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function c(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,c)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i}window.onload=function(){l()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxZQUFZaUcsR0FDYnpCLENBQ1QsQyxPQ2xKQSxTQUFlMEIsSSxvcENBaUJiLE9Eb0lJQyxFQUFNLElBQUlDLEdBQ1Z6QixnQkFHSndCLEVBQUlkLDJCRjdHUyxJQUFJZ0IsR0d4Q1Z6RCx5QkFBd0IsV0FVL0IsSUFHQSxJQURJMEQsRUppUlUsSUFBSUMsR0loUkkvSixnQixjQUF0QixTQUVBOEosRUFBZ0IvSCxzQkFDaEJILFNBQ0dDLGVBQWUscUJBQ2ZtSSxZQUFZRixFQUFnQjdHLHFCQUc3QjZHLEVBQWdCL0UsdUJBQ2hCK0UsRUFBZ0I5RSx3QkFFaEJwRCxTQUFTQyxlQUFlLGNBQWNDLFFBQVMsR0FHakRGLFNBQVNDLGVBQWUsZ0JBQWdCMkMsUUFBVSxXQUNoRCxJQUFJeEQsRUFDRlksU0FBU0MsZUFBZSxrQkFDeEIyRCxNQUVFdkUsRUFBVyxHQUNYVyxTQUFTQyxlQUFlLGNBQzFCWixFQUFZVyxTQUFTQyxlQUFlLFlBQ2pDMkQsT0FHTCxJQUFJdEUsRUFBTyxHQUNQVSxTQUFTQyxlQUFlLFVBQzFCWCxFQUFRVSxTQUFTQyxlQUFlLFFBQTZCMkQsT0FHL0RzRSxFQUFnQi9JLFlBQVlDLEVBQVNDLEVBQVVDLEdBQU12QyxNQUFLLFNBQUM4RyxHQUN6RDVHLFFBQVFDLElBQUkyRyxFQUNkLEdBQ0YsRSxJRGtHSyxJQUNEa0UsQyxvU0NoR041TCxPQUFPa00sT0FBUyxXQUNkUCxHQUNGLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Nb2Rvb0NvZGUgRnJvbnRlbnQgQXBwLy4vc3JjL2xvZ2luLnRzIiwid2VicGFjazovL01vZG9vQ29kZSBGcm9udGVudCBBcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vTW9kb29Db2RlIEZyb250ZW50IEFwcC8uL3NyYy9jb21tZW50LnRzIiwid2VicGFjazovL01vZG9vQ29kZSBGcm9udGVudCBBcHAvLi9zcmMvc2Nyb2xsLnRzIiwid2VicGFjazovL01vZG9vQ29kZSBGcm9udGVudCBBcHAvLi9zcmMvdXRpbC50cyIsIndlYnBhY2s6Ly9Nb2Rvb0NvZGUgRnJvbnRlbnQgQXBwLy4vc3JjL3RvYy50cyIsIndlYnBhY2s6Ly9Nb2Rvb0NvZGUgRnJvbnRlbnQgQXBwLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBHb29nbGVTaWduSW5QYXJhbXMge1xuICBjcmVkZW50aWFsOiBzdHJpbmc7XG59XG5cbih3aW5kb3cgYXMgYW55KS5vbkdvb2dsZUxvZ2luID0gKHNpZ25faW46IEdvb2dsZVNpZ25JblBhcmFtcykgPT4ge1xuICBmZXRjaChcIi9hdXRoL2dvb2dcIiwge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgaGVhZGVyczoge1xuICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdG9rZW46IHNpZ25faW4uY3JlZGVudGlhbCxcbiAgICB9KSxcbiAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gIH0pO1xufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJkZWNsYXJlIGNvbnN0IGdyZWNhcHRjaGE6IGFueTtcblxuaW50ZXJmYWNlIENvbW1lbnQge1xuICBjb21tZW50X2lkOiBudW1iZXI7XG4gIGFydGljbGVfdXJsOiBzdHJpbmc7XG4gIHJlcGx5X2lkczogbnVtYmVyW107XG4gIGNvbW1lbnRfZGF0ZTogc3RyaW5nO1xuICBhdXRob3JfbmFtZT86IHN0cmluZztcbiAgaW1hZ2VfbGluazogc3RyaW5nO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIGlzX21kOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgR2V0Q29tbWVudFJlc3BvbnNlIHtcbiAgY29tbWVudHM6IENvbW1lbnRbXTtcbn1cblxuY2xhc3MgQ29tbWVudE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxhc3RfY29tbWVudF9pbmRleF8gPSAwO1xuICAgIHRoaXMuY29tbWVudHNfID0gbmV3IE1hcCgpO1xuICAgIHRoaXMucm9vdF9jb21tZW50c18gPSBbXTtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0aGlzLm51bV90b3RhbF9jb21tZW50c18gPSBnZXROdW1Ub3RhbENvbW1lbnRzKCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgTG9hZENvbW1lbnRzKCkge1xuICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgbGV0IGFydGljbGVfdXJsID0gdXJsLnN1YnN0cih1cmwubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcIi9nZXQtY29tbWVudFwiLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgICBjYWNoZTogXCJuby1jYWNoZVwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGFydGljbGVfdXJsLFxuICAgICAgICBpbmRleF9zdGFydDogdGhpcy5sYXN0X2NvbW1lbnRfaW5kZXhfLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBsZXQgZ2V0X2NvbW1lbnRfcmVzcG9uc2U6IEdldENvbW1lbnRSZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBsZXQgY29tbWVudHMgPSBnZXRfY29tbWVudF9yZXNwb25zZS5jb21tZW50cztcbiAgICBmb3IgKGxldCBjb21tZW50IG9mIGNvbW1lbnRzKSB7XG4gICAgICB0aGlzLmNvbW1lbnRzXy5zZXQoY29tbWVudC5jb21tZW50X2lkLCBjb21tZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLmxhc3RfY29tbWVudF9pbmRleF8gKz0gNTA7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgUG9zdENvbW1lbnQoXG4gICAgY29udGVudDogc3RyaW5nLFxuICAgIHBhc3N3b3JkOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHBhcmVudF9pZD86IG51bWJlclxuICApIHtcbiAgICBjb25zdCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgYXJ0aWNsZV91cmwgPSB1cmwuc3Vic3RyKHVybC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcblxuICAgIGdyZWNhcHRjaGEucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgZ3JlY2FwdGNoYVxuICAgICAgICAuZXhlY3V0ZShcIjZMZUVfbllVQUFBQUFHbTlxVGE3MUl3dnZheVdWOVE3ZmxxTmt0bzJcIiwge1xuICAgICAgICAgIGFjdGlvbjogXCJDb21tZW50XCIsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICh0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgICAgZmV0Y2goXCIvd3JpdGUtY29tbWVudFwiLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgICAgICAgICBjYWNoZTogXCJuby1jYWNoZVwiLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHBhcmVudF9pZDogcGFyZW50X2lkLFxuICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQgfHwgXCJcIixcbiAgICAgICAgICAgICAgYXV0aG9yX25hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGFydGljbGVfdXJsOiBhcnRpY2xlX3VybCxcbiAgICAgICAgICAgICAgY2FwdGNoYV90b2tlbjogdG9rZW4sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkaW5nLWNvbW1lbnRcIikuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIENvbXB1dGVSb290Q29tbWVudHMoKSB7XG4gICAgbGV0IGNvbW1lbnRfaWRzID0gQXJyYXkuZnJvbSh0aGlzLmNvbW1lbnRzXy5rZXlzKCkpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICBsZXQgdmlzaXRlZF9jb21tZW50cyA9IG5ldyBTZXQ8bnVtYmVyPigpO1xuXG4gICAgdGhpcy5yb290X2NvbW1lbnRzXyA9IFtdO1xuXG4gICAgLy8gRmluZCB0aGUgcm9vdCBjb21tZW50cy5cbiAgICBmb3IgKGxldCBjb21tZW50X2lkIG9mIGNvbW1lbnRfaWRzKSB7XG4gICAgICBpZiAodmlzaXRlZF9jb21tZW50cy5oYXMoY29tbWVudF9pZCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucm9vdF9jb21tZW50c18ucHVzaCh0aGlzLmNvbW1lbnRzXy5nZXQoY29tbWVudF9pZCkhKTtcbiAgICAgIHRoaXMuVmlzaXRBbGxDaGlsZENvbW1lbnRzKGNvbW1lbnRfaWQsIHZpc2l0ZWRfY29tbWVudHMpO1xuICAgIH1cblxuICAgIHRoaXMucm9vdF9jb21tZW50c18gPSB0aGlzLnJvb3RfY29tbWVudHNfLnJldmVyc2UoKTtcbiAgfVxuXG4gIFZpc2l0QWxsQ2hpbGRDb21tZW50cyhjb21tZW50X2lkOiBudW1iZXIsIHZpc2l0ZWRfY29tbWVudHM6IFNldDxudW1iZXI+KSB7XG4gICAgbGV0IGNvbW1lbnQgPSB0aGlzLmNvbW1lbnRzXy5nZXQoY29tbWVudF9pZCk7XG4gICAgaWYgKCFjb21tZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmlzaXRlZF9jb21tZW50cy5hZGQoY29tbWVudF9pZCk7XG4gICAgZm9yIChsZXQgY2hpbGRfY29tbWVudF9pZCBvZiBjb21tZW50LnJlcGx5X2lkcyB8fCBbXSkge1xuICAgICAgdGhpcy5WaXNpdEFsbENoaWxkQ29tbWVudHMoY2hpbGRfY29tbWVudF9pZCwgdmlzaXRlZF9jb21tZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgQ3JlYXRlQ29tbWVudExpc3QoKSB7XG4gICAgbGV0IHJvb3RfY29tbWVudF9saXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgIHJvb3RfY29tbWVudF9saXN0LmNsYXNzTGlzdC5hZGQoXCJjb21tZW50LWxpc3RcIik7XG4gICAgcm9vdF9jb21tZW50X2xpc3QuaWQgPSBcInJvb3QtY29tbWVudC1saXN0XCI7XG5cbiAgICBmb3IgKGNvbnN0IGNvbW1lbnQgb2YgdGhpcy5yb290X2NvbW1lbnRzXykge1xuICAgICAgZm9yIChjb25zdCBjb21tZW50X2VsZW0gb2YgdGhpcy5DcmVhdGVDb21tZW50KGNvbW1lbnQuY29tbWVudF9pZCkpIHtcbiAgICAgICAgcm9vdF9jb21tZW50X2xpc3QuYXBwZW5kQ2hpbGQoY29tbWVudF9lbGVtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcm9vdF9jb21tZW50X2xpc3Q7XG4gIH1cblxuICBDcmVhdGVDb21tZW50KGNvbW1lbnRfaWQ6IG51bWJlcikge1xuICAgIGxldCBjb21tZW50ID0gdGhpcy5jb21tZW50c18uZ2V0KGNvbW1lbnRfaWQpO1xuICAgIGlmICghY29tbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjb21tZW50X2VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgY29tbWVudF9lbGVtLmNsYXNzTGlzdC5hZGQoXCJjb21tZW50XCIpO1xuXG4gICAgbGV0IGNvbW1lbnRfcHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29tbWVudF9wcm9maWxlLmNsYXNzTGlzdC5hZGQoXCJjb21tZW50LXByb2ZpbGVcIik7XG5cbiAgICBsZXQgaW1hZ2VfbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgaWYgKGNvbW1lbnQuaW1hZ2VfbGluaykge1xuICAgICAgaW1hZ2VfbGluay5zcmMgPSBjb21tZW50LmltYWdlX2xpbms7XG4gICAgICBpbWFnZV9saW5rLmFsdCA9IFwi7ZSE66Gc7ZWEIOyCrOynhFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbWFnZV9saW5rLnNyYyA9IFwiLi9pbWcvdW5rbm93bl9wZXJzb24ucG5nXCI7XG4gICAgICBpbWFnZV9saW5rLmFsdCA9IFwi7ZSE66Gc7ZWEIOyCrOynhCDsl4bsnYxcIjtcbiAgICB9XG5cbiAgICBjb21tZW50X3Byb2ZpbGUuYXBwZW5kQ2hpbGQoaW1hZ2VfbGluayk7XG4gICAgY29tbWVudF9lbGVtLmFwcGVuZENoaWxkKGNvbW1lbnRfcHJvZmlsZSk7XG5cbiAgICBsZXQgY29tbWVudF9pbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb21tZW50X2luZm8uY2xhc3NMaXN0LmFkZChcImNvbW1lbnQtaW5mb1wiKTtcblxuICAgIC8vIENvbW1lbnQgaGVhZGVyLlxuICAgIGxldCBjb21tZW50X2hlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29tbWVudF9oZWFkZXIuY2xhc3NMaXN0LmFkZChcImNvbW1lbnQtaGVhZGVyXCIpO1xuXG4gICAgbGV0IGNyZWF0ZVNpbXBsZVNwYW4gPSAoY2xhc3NfbmFtZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpID0+IHtcbiAgICAgIGxldCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NfbmFtZSk7XG4gICAgICBlbGVtLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgIHJldHVybiBlbGVtO1xuICAgIH07XG5cbiAgICBjb21tZW50X2hlYWRlci5hcHBlbmRDaGlsZChcbiAgICAgIGNyZWF0ZVNpbXBsZVNwYW4oXCJjb21tZW50LWF1dGhvclwiLCBjb21tZW50LmF1dGhvcl9uYW1lIHx8IFwiXCIpXG4gICAgKTtcbiAgICBjb21tZW50X2hlYWRlci5hcHBlbmRDaGlsZChcbiAgICAgIGNyZWF0ZVNpbXBsZVNwYW4oXCJjb21tZW50LWRhdGVcIiwgY29tbWVudC5jb21tZW50X2RhdGUgfHwgXCJcIilcbiAgICApO1xuXG4gICAgY29tbWVudF9pbmZvLmFwcGVuZENoaWxkKGNvbW1lbnRfaGVhZGVyKTtcblxuICAgIC8vIENvbW1lbnQgY29udGVudC5cbiAgICBsZXQgY29tbWVudF9jb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb21tZW50X2NvbnRlbnQuY2xhc3NMaXN0LmFkZChcImNvbW1lbnQtY29udGVudFwiKTtcbiAgICBjb21tZW50X2NvbnRlbnQudGV4dENvbnRlbnQgPSBjb21tZW50LmNvbnRlbnQ7XG4gICAgY29tbWVudF9pbmZvLmFwcGVuZENoaWxkKGNvbW1lbnRfY29udGVudCk7XG5cbiAgICBsZXQgY29tbWVudF9hY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbW1lbnRfYWN0aW9uLmNsYXNzTGlzdC5hZGQoXCJjb21tZW50LWFjdGlvblwiKTtcbiAgICBjb21tZW50X2FjdGlvbi5pZCA9IFwiY29tbWVudC1pZC1cIiArIGNvbW1lbnRfaWQ7XG5cbiAgICBjb25zdCBjb21tZW50UmVwbHlBY3Rpb24gPSBjcmVhdGVTaW1wbGVTcGFuKFwiY29tbWVudC1yZXBseVwiLCBcIuuLteq4gCDri6zquLBcIik7XG4gICAgY29tbWVudFJlcGx5QWN0aW9uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLkNyZWF0ZUNvbW1lbnRSZXBseShjb21tZW50X2lkKTtcbiAgICB9O1xuICAgIGNvbW1lbnRfYWN0aW9uLmFwcGVuZENoaWxkKGNvbW1lbnRSZXBseUFjdGlvbik7XG5cbiAgICBjb25zdCBjb21tZW50RGVsZXRlQWN0aW9uID0gY3JlYXRlU2ltcGxlU3BhbihcImNvbW1lbnQtZGVsZXRlXCIsIFwi64u16riAIOyCreygnFwiKTtcbiAgICBjb21tZW50X2FjdGlvbi5hcHBlbmRDaGlsZChjb21tZW50RGVsZXRlQWN0aW9uKTtcbiAgICBjb21tZW50X2luZm8uYXBwZW5kQ2hpbGQoY29tbWVudF9hY3Rpb24pO1xuXG4gICAgY29tbWVudF9lbGVtLmFwcGVuZENoaWxkKGNvbW1lbnRfaW5mbyk7XG5cbiAgICBpZiAoIWNvbW1lbnQucmVwbHlfaWRzPy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbY29tbWVudF9lbGVtXTtcbiAgICB9XG5cbiAgICBsZXQgY2hpbGRfY29tbWVudHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgY2hpbGRfY29tbWVudHMuY2xhc3NMaXN0LmFkZChcImNvbW1lbnQtbGlzdFwiKTtcblxuICAgIGZvciAoY29uc3QgcmVwbHlfaWQgb2YgY29tbWVudC5yZXBseV9pZHMpIHtcbiAgICAgIGxldCBlbGVtcyA9IHRoaXMuQ3JlYXRlQ29tbWVudChyZXBseV9pZCk7XG4gICAgICBmb3IgKGNvbnN0IGVsZW0gb2YgZWxlbXMpIHtcbiAgICAgICAgY2hpbGRfY29tbWVudHMuYXBwZW5kKGVsZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbY29tbWVudF9lbGVtLCBjaGlsZF9jb21tZW50c107XG4gIH1cblxuICBHZXROdW1Ub3RhbENvbW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLm51bV90b3RhbF9jb21tZW50c187XG4gIH1cblxuICBHZXRMYXN0Q29tbWVudEluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLmxhc3RfY29tbWVudF9pbmRleF87XG4gIH1cblxuICBDcmVhdGVDb21tZW50UmVwbHkoY29tbWVudF9pZDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudF9yZXBseV9jb21tZW50X2JveCkge1xuICAgICAgdGhpcy5jdXJyZW50X3JlcGx5X2NvbW1lbnRfYm94LnJlbW92ZSgpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhIGNvbW1lbnQgYm94IGZvciB0aGUgY29tbWVudCByZXBseS5cbiAgICBsZXQgcmVwbHlfYm94ID0gZG9jdW1lbnRcbiAgICAgIC5nZXRFbGVtZW50QnlJZChcImNvbW1lbnQtcG9zdC1zZWN0aW9uXCIpXG4gICAgICAuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xuICAgIHJlcGx5X2JveC5pZCA9IFwicmVwbHktcG9zdC1zZWN0aW9uXCI7XG5cbiAgICBsZXQgY29tbWVudF90b19hZGRfcmVwbHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICAgIFwiY29tbWVudC1pZC1cIiArIGNvbW1lbnRfaWRcbiAgICApLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcblxuICAgIGNvbW1lbnRfdG9fYWRkX3JlcGx5Lmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIHJlcGx5X2JveCk7XG5cbiAgICAoXG4gICAgICByZXBseV9ib3guZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNvbW1lbnQtYnRuXCIpWzBdIGFzIEhUTUxCdXR0b25FbGVtZW50XG4gICAgKS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgbGV0IG5hbWUgPSBcIlwiLFxuICAgICAgICBwYXNzd29yZCA9IFwiXCI7XG4gICAgICBpZiAocmVwbHlfYm94LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjb21tZW50LWJveC1uYW1lXCIpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbmFtZSA9IChcbiAgICAgICAgICByZXBseV9ib3guZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcbiAgICAgICAgICAgIFwiY29tbWVudC1ib3gtbmFtZVwiXG4gICAgICAgICAgKVswXSBhcyBIVE1MSW5wdXRFbGVtZW50XG4gICAgICAgICkudmFsdWU7XG5cbiAgICAgICAgcGFzc3dvcmQgPSAoXG4gICAgICAgICAgcmVwbHlfYm94LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXG4gICAgICAgICAgICBcImNvbW1lbnQtYm94LW5hbWVcIlxuICAgICAgICAgIClbMF0gYXMgSFRNTElucHV0RWxlbWVudFxuICAgICAgICApLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgY29udGVudCA9IChcbiAgICAgICAgcmVwbHlfYm94LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXG4gICAgICAgICAgXCJjb21tZW50LXRleHRhcmVhXCJcbiAgICAgICAgKVswXSBhcyBIVE1MSW5wdXRFbGVtZW50XG4gICAgICApLnZhbHVlO1xuXG4gICAgICB0aGlzLlBvc3RDb21tZW50KGNvbnRlbnQsIHBhc3N3b3JkLCBuYW1lLCAvKnBhcmVudF9pZD0qLyBjb21tZW50X2lkKS50aGVuKFxuICAgICAgICAocmVzKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9O1xuICAgIHRoaXMuY3VycmVudF9yZXBseV9jb21tZW50X2JveCA9IHJlcGx5X2JveDtcbiAgfVxuXG4gIHByaXZhdGUgbGFzdF9jb21tZW50X2luZGV4XzogbnVtYmVyO1xuICBwcml2YXRlIGNvbW1lbnRzXzogTWFwPG51bWJlciwgQ29tbWVudD47XG4gIHByaXZhdGUgcm9vdF9jb21tZW50c186IENvbW1lbnRbXTtcbiAgcHJpdmF0ZSBudW1fdG90YWxfY29tbWVudHNfOiBudW1iZXI7XG5cbiAgLy8gUmVwbHkgY29tbWVudCBib3ggdGhhdCBleGlzdHMuXG4gIHByaXZhdGUgY3VycmVudF9yZXBseV9jb21tZW50X2JveD86IEhUTUxFbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlQ29tbWVudE1hbmFnZXIoKTogQ29tbWVudE1hbmFnZXIge1xuICBsZXQgY29tbWVudCA9IG5ldyBDb21tZW50TWFuYWdlcigpO1xuICByZXR1cm4gY29tbWVudDtcbn1cbiIsImNsYXNzIFNjcm9sbCB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxhc3RfcG9zaXRpb24gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICB0aGlzLnRpbWVfdG9fdXBkYXRlX3RvYyA9IHRydWU7XG5cbiAgICB0aGlzLnNjcm9sbF9kb3duX2V2ZW50X2hhbmRsZXJzID0gW107XG4gICAgdGhpcy5zY3JvbGxfdXBfZXZlbnRfaGFuZGxlcnMgPSBbXTtcblxuICAgIHRoaXMuSW5zdGFsbFNjcm9sbEV2ZW50SGFuZGxlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBJbnN0YWxsU2Nyb2xsRXZlbnRIYW5kbGVyKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoZSkgPT4ge1xuICAgICAgaWYgKHRoaXMudGltZV90b191cGRhdGVfdG9jKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMudGltZV90b191cGRhdGVfdG9jID0gdHJ1ZTtcbiAgICAgICAgICBpZiAodGhpcy5sYXN0X3Bvc2l0aW9uID4gd2luZG93LnNjcm9sbFkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGZ1bmMgb2YgdGhpcy5zY3JvbGxfdXBfZXZlbnRfaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgZnVuYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBmdW5jIG9mIHRoaXMuc2Nyb2xsX2Rvd25fZXZlbnRfaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgZnVuYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmxhc3RfcG9zaXRpb24gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGltZV90b191cGRhdGVfdG9jID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgUmVnaXN0ZXJTY3JvbGxVcEhhbmRsZXIoZnVuYzogKCk9PnZvaWQpIHtcbiAgICB0aGlzLnNjcm9sbF91cF9ldmVudF9oYW5kbGVycy5wdXNoKGZ1bmMpO1xuICB9XG5cbiAgcHVibGljIFJlZ2lzdGVyU2Nyb2xsRG93bkhhbmRsZXIoZnVuYzogKCk9PnZvaWQpIHtcbiAgICB0aGlzLnNjcm9sbF9kb3duX2V2ZW50X2hhbmRsZXJzLnB1c2goZnVuYyk7XG4gIH1cblxuICBwcml2YXRlIGxhc3RfcG9zaXRpb246IG51bWJlcjtcblxuICAvLyBNYWtlIHN1cmUgbm90IHRvIGhhbmRsZSBzY3JvbGwgZXZlbnQgdG9vIG9mdGVuLlxuICBwcml2YXRlIHRpbWVfdG9fdXBkYXRlX3RvYzogYm9vbGVhbjtcblxuICBwcml2YXRlIHNjcm9sbF9kb3duX2V2ZW50X2hhbmRsZXJzOiAoKCk9PiB2b2lkKVtdO1xuICBwcml2YXRlIHNjcm9sbF91cF9ldmVudF9oYW5kbGVyczogKCgpPT4gdm9pZClbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVNjcm9sbEhhbmRsZXIoKSA6IFNjcm9sbCB7XG4gIGxldCBzY3JvbGwgPSBuZXcgU2Nyb2xsKCk7XG4gIHJldHVybiBzY3JvbGw7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gU3RyaXBQcmVmaXhOYnNwKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHJbaV0gPT0gJ8KgJykgeyAgLy8gVGhpcyBpcyBub3Qgc3BhY2UuIFRoaXMgaXMgdW5pY29kZSBOQlNQIChVKzAwQTApXG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gR2V0SGVhZGVyTnVtKHN0cjogc3RyaW5nKTogbnVtYmVyIHtcbiAgaWYgKCEoc3RyWzBdID09ICdoJyB8fCBzdHJbMF0gPT0gJ0gnKSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUludChzdHIuc3Vic3RyaW5nKDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElzRWxlbWVudEluVmlld1BvcnQoZWw6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gIGxldCBib3VuZGluZyA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gYm91bmRpbmcudG9wID49IDAgJiYgYm91bmRpbmcubGVmdCA+PSAwICYmXG4gICAgICBib3VuZGluZy5yaWdodCA8PVxuICAgICAgKHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkgJiZcbiAgICAgIGJvdW5kaW5nLmJvdHRvbSA8PVxuICAgICAgKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcbn0iLCJpbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4vdXRpbCc7XG5cbmludGVyZmFjZSBUT0NIZWFkZXIge1xuICBoZWFkZXJfbmFtZTogc3RyaW5nO1xuICBoZWFkZXJfdGFnOiBudW1iZXI7XG4gIGhlYWRlcl9pZDogc3RyaW5nO1xuICBoZWFkZXJfcG9zOiBudW1iZXI7XG4gIGhlYWRlcl9lbGVtX2xpbms6IEhUTUxBbmNob3JFbGVtZW50O1xufVxuXG5jbGFzcyBUT0Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnRvY19oZWFkZXJzXyA9IFtdO1xuICAgIHRoaXMudGltZV90b191cGRhdGVfdG9jID0gdHJ1ZTtcbiAgICB0aGlzLnByZXZfaGlnaGxpZ2h0ZWQgPSAwO1xuXG4gICAgLy8gRmV0Y2ggVE9DIEhlYWRlcnMuXG4gICAgdGhpcy5GZXRjaEhlYWRlcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgRmV0Y2hIZWFkZXJzKCkge1xuICAgIC8vIEZpcnN0IGlkZW50aWZ5IGFsbCB0aGUgaGVhZGVycy5cbiAgICBsZXQgaGVhZGVyczogTm9kZUxpc3RPZjxFbGVtZW50PiA9XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5oZWFkZXItZ2VuZXJhbCcpO1xuXG4gICAgZm9yIChsZXQgaGVhZGVyIG9mIGhlYWRlcnMgYXMgYW55KSB7XG4gICAgICBsZXQgaGVhZGVyX25hbWU6IHN0cmluZyA9IFV0aWwuU3RyaXBQcmVmaXhOYnNwKGhlYWRlci5pbm5lclRleHQpO1xuICAgICAgbGV0IGhlYWRlcl90YWc6IG51bWJlciA9IFV0aWwuR2V0SGVhZGVyTnVtKGhlYWRlci50YWdOYW1lKTtcbiAgICAgIGxldCBoZWFkZXJfaWQ6IHN0cmluZyA9IGhlYWRlci5pZDtcbiAgICAgIGxldCBoZWFkZXJfcG9zOiBudW1iZXIgPVxuICAgICAgICAgIGhlYWRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgIHRoaXMudG9jX2hlYWRlcnNfLnB1c2goe1xuICAgICAgICBoZWFkZXJfbmFtZSxcbiAgICAgICAgaGVhZGVyX3RhZyxcbiAgICAgICAgaGVhZGVyX2lkLFxuICAgICAgICBoZWFkZXJfcG9zLFxuICAgICAgICBoZWFkZXJfZWxlbV9saW5rOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIFJlY3Vyc2l2ZVRPQ0NyZWF0b3IoXG4gICAgICBwYXJlbnRfb2w6IEhUTUxPTGlzdEVsZW1lbnQsIGN1cnJlbnRfaGVhZGVyX251bTogbnVtYmVyLFxuICAgICAgdGFnX251bWJlcjogbnVtYmVyKSB7XG4gICAgbGV0IGN1cnJlbnRfbGkgPSBudWxsO1xuICAgIGxldCBpID0gY3VycmVudF9oZWFkZXJfbnVtO1xuICAgIGZvciAoOyBpIDwgdGhpcy50b2NfaGVhZGVyc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBoZWFkZXIgPSB0aGlzLnRvY19oZWFkZXJzX1tpXTtcblxuICAgICAgLy8gaDMgLT4gaDJcbiAgICAgIGlmIChoZWFkZXIuaGVhZGVyX3RhZyA8IHRhZ19udW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgICAvLyBoMiAtPiBoM1xuICAgICAgZWxzZSBpZiAoaGVhZGVyLmhlYWRlcl90YWcgPiB0YWdfbnVtYmVyKSB7XG4gICAgICAgIGxldCBjaGlsZF9wYXJlbnRfb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvbCcpIGFzIEhUTUxPTGlzdEVsZW1lbnQ7XG4gICAgICAgIGNoaWxkX3BhcmVudF9vbC5jbGFzc05hbWUgPSAndG9jLWxpc3QnO1xuICAgICAgICBjdXJyZW50X2xpLmFwcGVuZENoaWxkKGNoaWxkX3BhcmVudF9vbCk7XG4gICAgICAgIGkgPSB0aGlzLlJlY3Vyc2l2ZVRPQ0NyZWF0b3IoY2hpbGRfcGFyZW50X29sLCBpLCBoZWFkZXIuaGVhZGVyX3RhZyk7XG4gICAgICAgIGktLTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gQnVpbGRDYXRlZ29yeUxpc3RFbGVtZW50KGhlYWRlcik7XG4gICAgICAgIGhlYWRlci5oZWFkZXJfZWxlbV9saW5rID0gZWxlbWVudC5maXJzdENoaWxkIGFzIEhUTUxBbmNob3JFbGVtZW50O1xuICAgICAgICBwYXJlbnRfb2wuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgIGN1cnJlbnRfbGkgPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHB1YmxpYyBDcmVhdGVUT0NMaXN0KCkge1xuICAgIGxldCByb290X29sID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvYy1saXN0JykgYXMgSFRNTE9MaXN0RWxlbWVudDtcbiAgICBpZiAocm9vdF9vbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuUmVjdXJzaXZlVE9DQ3JlYXRvcihyb290X29sLCAwLCB0aGlzLnRvY19oZWFkZXJzX1swXS5oZWFkZXJfdGFnKTtcblxuICAgIHRoaXMuSW5zdGFsbFRPQ0V2ZW50SGFuZGxlcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgSW5zdGFsbFRPQ0V2ZW50SGFuZGxlcnMoKSB7XG4gICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBsYXN0X2tub3duX3Njcm9sbF9wb3MgPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgIGlmICh0aGF0LnRpbWVfdG9fdXBkYXRlX3RvYykge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoYXQudGltZV90b191cGRhdGVfdG9jID0gdHJ1ZTtcbiAgICAgICAgICBsZXQgaGVhZGVyX251bSA9IHRoYXQuR2V0Q3VycmVudEFjdGl2ZVRPQ0l0ZW0obGFzdF9rbm93bl9zY3JvbGxfcG9zKTtcbiAgICAgICAgICB0aGF0LkhpZ2hsaWdodEFjdGl2ZUl0ZW0oaGVhZGVyX251bSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGF0LnRpbWVfdG9fdXBkYXRlX3RvYyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIEhpZ2hsaWdodEFjdGl2ZUl0ZW0oaXRlbV9udW06IG51bWJlcikge1xuICAgIHRoaXMudG9jX2hlYWRlcnNfW3RoaXMucHJldl9oaWdobGlnaHRlZF0uaGVhZGVyX2VsZW1fbGluay5jbGFzc05hbWUgPVxuICAgICAgICAndG9jLWl0ZW0tbGluayc7XG4gICAgdGhpcy50b2NfaGVhZGVyc19baXRlbV9udW1dLmhlYWRlcl9lbGVtX2xpbmsuY2xhc3NOYW1lID1cbiAgICAgICAgJ3RvYy1pdGVtLWxpbmsgdG9jLWFjdGl2ZS1pdGVtJztcbiAgICB0aGlzLnByZXZfaGlnaGxpZ2h0ZWQgPSBpdGVtX251bTtcbiAgfVxuXG4gIHB1YmxpYyBJbnN0YWxsTGlua0NsaWNrSGFuZGxlcigpIHtcbiAgICBmb3IgKGxldCBoZWFkZXIgb2YgdGhpcy50b2NfaGVhZGVyc18pIHtcbiAgICAgIGhlYWRlci5oZWFkZXJfZWxlbV9saW5rLm9uY2xpY2sgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgaGVhZGVyLmhlYWRlcl9wb3MgLSAxNTApO1xuICAgICAgICBjb25zb2xlLmxvZyhoZWFkZXIuaGVhZGVyX3BvcyAtIDE1MCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgR2V0Q3VycmVudEFjdGl2ZVRPQ0l0ZW0oc2Nyb2xsX3BvczogbnVtYmVyKSB7XG4gICAgaWYgKHNjcm9sbF9wb3MgPCB0aGlzLnRvY19oZWFkZXJzX1swXS5oZWFkZXJfcG9zKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yICg7IGkgPCB0aGlzLnRvY19oZWFkZXJzXy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGkgPT0gdGhpcy50b2NfaGVhZGVyc18ubGVuZ3RoIC0gMSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgdGhpcy50b2NfaGVhZGVyc19baV0uaGVhZGVyX3BvcyA8PSBzY3JvbGxfcG9zICYmXG4gICAgICAgICAgc2Nyb2xsX3BvcyA8IHRoaXMudG9jX2hlYWRlcnNfW2kgKyAxXS5oZWFkZXJfcG9zKSB7XG4gICAgICAgIGlmIChzY3JvbGxfcG9zIC0gdGhpcy50b2NfaGVhZGVyc19baV0uaGVhZGVyX3BvcyA+XG4gICAgICAgICAgICAgICAgdGhpcy50b2NfaGVhZGVyc19baSArIDFdLmhlYWRlcl9wb3MgLSBzY3JvbGxfcG9zICYmXG4gICAgICAgICAgICBVdGlsLklzRWxlbWVudEluVmlld1BvcnQoXG4gICAgICAgICAgICAgICAgdGhpcy50b2NfaGVhZGVyc19baSArIDFdLmhlYWRlcl9lbGVtX2xpbmspKSB7XG4gICAgICAgICAgcmV0dXJuIGkgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpO1xuICB9XG5cbiAgcHJpdmF0ZSB0b2NfaGVhZGVyc186IFRPQ0hlYWRlcltdO1xuICBwcml2YXRlIHRpbWVfdG9fdXBkYXRlX3RvYzogYm9vbGVhbjtcbiAgcHJpdmF0ZSBwcmV2X2hpZ2hsaWdodGVkOiBudW1iZXI7XG59XG5cbmZ1bmN0aW9uIEJ1aWxkQ2F0ZWdvcnlMaXN0RWxlbWVudChoZWFkZXI6IFRPQ0hlYWRlcik6IEhUTUxMSUVsZW1lbnQge1xuICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykgYXMgSFRNTExJRWxlbWVudDtcbiAgZWxlbWVudC5jbGFzc05hbWUgPSAndG9jLWxpc3QtaXRlbSc7XG5cbiAgbGV0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJykgYXMgSFRNTFNwYW5FbGVtZW50O1xuICBsaW5rLmNsYXNzTmFtZSA9ICd0b2MtaXRlbS1saW5rJ1xuICBsaW5rLnRleHRDb250ZW50ID0gaGVhZGVyLmhlYWRlcl9uYW1lO1xuXG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQobGluayk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQnVpbGRUYWJsZU9mQ29udGVudHMoKTogVE9DIHtcbiAgbGV0IHRvYyA9IG5ldyBUT0MoKTtcbiAgdG9jLkNyZWF0ZVRPQ0xpc3QoKTtcblxuICAvLyBJbnN0YWxsIGNsaWNrIGhhbmRsZXJzLlxuICB0b2MuSW5zdGFsbExpbmtDbGlja0hhbmRsZXIoKTtcbiAgcmV0dXJuIHRvYztcbn1cbiIsImltcG9ydCB7IENyZWF0ZUNvbW1lbnRNYW5hZ2VyIH0gZnJvbSBcIi4vY29tbWVudFwiO1xuaW1wb3J0ICogYXMgU2Nyb2xsIGZyb20gXCIuL3Njcm9sbFwiO1xuaW1wb3J0ICogYXMgVE9DIGZyb20gXCIuL3RvY1wiO1xuaW1wb3J0IFwiLi9sb2dpblwiO1xuXG4vLyBNYWluIGVudHJ5IHBvaW50LlxuYXN5bmMgZnVuY3Rpb24gTWFpbigpIHtcbiAgVE9DLkJ1aWxkVGFibGVPZkNvbnRlbnRzKCk7XG5cbiAgbGV0IHNjcm9sbCA9IFNjcm9sbC5DcmVhdGVTY3JvbGxIYW5kbGVyKCk7XG4gIHNjcm9sbC5SZWdpc3RlclNjcm9sbFVwSGFuZGxlcigoKSA9PiB7XG4gICAgLypcbiAgICBjb25zb2xlLmxvZyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiOnRhcmdldFwiKSk7XG4gICAgbGV0IHBhZGRlZF9oZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiOnRhcmdldFwiKSBhcyBIVE1MQW5jaG9yRWxlbWVudDtcbiAgICBpZiAocGFkZGVkX2hlYWRlci5zdHlsZS5wYWRkaW5nVG9wICE9IFwiMFwiKSB7XG4gICAgICBwYWRkZWRfaGVhZGVyLnN0eWxlLnBhZGRpbmdUb3AgPSBcIjBcIjtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgIyBmcm9tIHVybC5cbiAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCAnICcpOyovXG4gIH0pO1xuXG4gIGxldCBjb21tZW50X21hbmFnZXIgPSBDcmVhdGVDb21tZW50TWFuYWdlcigpO1xuICBhd2FpdCBjb21tZW50X21hbmFnZXIuTG9hZENvbW1lbnRzKCk7XG5cbiAgY29tbWVudF9tYW5hZ2VyLkNvbXB1dGVSb290Q29tbWVudHMoKTtcbiAgZG9jdW1lbnRcbiAgICAuZ2V0RWxlbWVudEJ5SWQoXCJyb290LWNvbW1lbnQtbGlzdFwiKVxuICAgIC5yZXBsYWNlV2l0aChjb21tZW50X21hbmFnZXIuQ3JlYXRlQ29tbWVudExpc3QoKSk7XG5cbiAgaWYgKFxuICAgIGNvbW1lbnRfbWFuYWdlci5HZXROdW1Ub3RhbENvbW1lbnRzKCkgPj1cbiAgICBjb21tZW50X21hbmFnZXIuR2V0TGFzdENvbW1lbnRJbmRleCgpXG4gICkge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uLWJveFwiKS5oaWRkZW4gPSBmYWxzZTtcbiAgfVxuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9zdC1jb21tZW50XCIpLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgbGV0IGNvbnRlbnQgPSAoXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBvc3RlZC1jb21tZW50XCIpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnRcbiAgICApLnZhbHVlO1xuXG4gICAgbGV0IHBhc3N3b3JkID0gXCJcIjtcbiAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXNzd29yZFwiKSkge1xuICAgICAgcGFzc3dvcmQgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXNzd29yZFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50KVxuICAgICAgICAudmFsdWU7XG4gICAgfVxuXG4gICAgbGV0IG5hbWUgPSBcIlwiO1xuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVcIikpIHtcbiAgICAgIG5hbWUgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgIH1cblxuICAgIGNvbW1lbnRfbWFuYWdlci5Qb3N0Q29tbWVudChjb250ZW50LCBwYXNzd29yZCwgbmFtZSkudGhlbigocmVzKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgIH0pO1xuICB9O1xufVxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICBNYWluKCk7XG59O1xuIl0sIm5hbWVzIjpbIndpbmRvdyIsIm9uR29vZ2xlTG9naW4iLCJzaWduX2luIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b2tlbiIsImNyZWRlbnRpYWwiLCJ0aGVuIiwicmVzcG9uc2UiLCJjb25zb2xlIiwibG9nIiwibG9jYXRpb24iLCJyZWxvYWQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsInRoaXMiLCJsYXN0X2NvbW1lbnRfaW5kZXhfIiwiY29tbWVudHNfIiwiTWFwIiwicm9vdF9jb21tZW50c18iLCJudW1fdG90YWxfY29tbWVudHNfIiwiZ2V0TnVtVG90YWxDb21tZW50cyIsIkxvYWRDb21tZW50cyIsInVybCIsInBhdGhuYW1lIiwiYXJ0aWNsZV91cmwiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsIm1vZGUiLCJjYWNoZSIsImluZGV4X3N0YXJ0IiwianNvbiIsImdldF9jb21tZW50X3Jlc3BvbnNlIiwiY29tbWVudHMiLCJjb21tZW50Iiwic2V0IiwiY29tbWVudF9pZCIsIlBvc3RDb21tZW50IiwiY29udGVudCIsInBhc3N3b3JkIiwibmFtZSIsInBhcmVudF9pZCIsImhyZWYiLCJncmVjYXB0Y2hhIiwicmVhZHkiLCJleGVjdXRlIiwiYWN0aW9uIiwiYXV0aG9yX25hbWUiLCJjYXB0Y2hhX3Rva2VuIiwiZGF0YSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJoaWRkZW4iLCJDb21wdXRlUm9vdENvbW1lbnRzIiwiY29tbWVudF9pZHMiLCJBcnJheSIsImZyb20iLCJrZXlzIiwic29ydCIsImEiLCJiIiwidmlzaXRlZF9jb21tZW50cyIsIlNldCIsImhhcyIsInB1c2giLCJnZXQiLCJWaXNpdEFsbENoaWxkQ29tbWVudHMiLCJyZXZlcnNlIiwiYWRkIiwicmVwbHlfaWRzIiwiY2hpbGRfY29tbWVudF9pZCIsIkNyZWF0ZUNvbW1lbnRMaXN0Iiwicm9vdF9jb21tZW50X2xpc3QiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiaWQiLCJDcmVhdGVDb21tZW50IiwiY29tbWVudF9lbGVtIiwiYXBwZW5kQ2hpbGQiLCJjb21tZW50X3Byb2ZpbGUiLCJpbWFnZV9saW5rIiwic3JjIiwiYWx0IiwiY29tbWVudF9pbmZvIiwiY29tbWVudF9oZWFkZXIiLCJjcmVhdGVTaW1wbGVTcGFuIiwiY2xhc3NfbmFtZSIsInRleHQiLCJlbGVtIiwidGV4dENvbnRlbnQiLCJjb21tZW50X2RhdGUiLCJjb21tZW50X2NvbnRlbnQiLCJjb21tZW50X2FjdGlvbiIsImNvbW1lbnRSZXBseUFjdGlvbiIsIm9uY2xpY2siLCJDcmVhdGVDb21tZW50UmVwbHkiLCJjb21tZW50RGVsZXRlQWN0aW9uIiwibGVuZ3RoIiwiY2hpbGRfY29tbWVudHMiLCJyZXBseV9pZCIsImFwcGVuZCIsIkdldE51bVRvdGFsQ29tbWVudHMiLCJHZXRMYXN0Q29tbWVudEluZGV4IiwiY3VycmVudF9yZXBseV9jb21tZW50X2JveCIsInJlbW92ZSIsInJlcGx5X2JveCIsImNsb25lTm9kZSIsInBhcmVudEVsZW1lbnQiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidmFsdWUiLCJyZXMiLCJsYXN0X3Bvc2l0aW9uIiwic2Nyb2xsWSIsInRpbWVfdG9fdXBkYXRlX3RvYyIsInNjcm9sbF9kb3duX2V2ZW50X2hhbmRsZXJzIiwic2Nyb2xsX3VwX2V2ZW50X2hhbmRsZXJzIiwiSW5zdGFsbFNjcm9sbEV2ZW50SGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZnVuYyIsIlJlZ2lzdGVyU2Nyb2xsVXBIYW5kbGVyIiwiUmVnaXN0ZXJTY3JvbGxEb3duSGFuZGxlciIsIlN0cmlwUHJlZml4TmJzcCIsInN0ciIsImkiLCJzdWJzdHJpbmciLCJ0b2NfaGVhZGVyc18iLCJwcmV2X2hpZ2hsaWdodGVkIiwiRmV0Y2hIZWFkZXJzIiwicXVlcnlTZWxlY3RvckFsbCIsImhlYWRlciIsImhlYWRlcl9uYW1lIiwiaW5uZXJUZXh0IiwiaGVhZGVyX3RhZyIsInRhZ05hbWUiLCJwYXJzZUludCIsImhlYWRlcl9pZCIsImhlYWRlcl9wb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJoZWFkZXJfZWxlbV9saW5rIiwiUmVjdXJzaXZlVE9DQ3JlYXRvciIsInBhcmVudF9vbCIsImN1cnJlbnRfaGVhZGVyX251bSIsInRhZ19udW1iZXIiLCJjdXJyZW50X2xpIiwiY2hpbGRfcGFyZW50X29sIiwiY2xhc3NOYW1lIiwiZWxlbWVudCIsIkJ1aWxkQ2F0ZWdvcnlMaXN0RWxlbWVudCIsImZpcnN0Q2hpbGQiLCJDcmVhdGVUT0NMaXN0Iiwicm9vdF9vbCIsInF1ZXJ5U2VsZWN0b3IiLCJJbnN0YWxsVE9DRXZlbnRIYW5kbGVycyIsInRoYXQiLCJsYXN0X2tub3duX3Njcm9sbF9wb3MiLCJoZWFkZXJfbnVtIiwiR2V0Q3VycmVudEFjdGl2ZVRPQ0l0ZW0iLCJIaWdobGlnaHRBY3RpdmVJdGVtIiwiaXRlbV9udW0iLCJJbnN0YWxsTGlua0NsaWNrSGFuZGxlciIsInNjcm9sbFRvIiwic2Nyb2xsX3BvcyIsImJvdW5kaW5nIiwibGVmdCIsInJpZ2h0IiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiYm90dG9tIiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJsaW5rIiwiTWFpbiIsInRvYyIsIlRPQyIsIlNjcm9sbCIsImNvbW1lbnRfbWFuYWdlciIsIkNvbW1lbnRNYW5hZ2VyIiwicmVwbGFjZVdpdGgiLCJvbmxvYWQiXSwic291cmNlUm9vdCI6IiJ9