(()=>{"use strict";var e=function(){function e(){this.last_comment_index_=0,this.comments_=new Map,this.root_comments_=[]}return e.prototype.LoadComments=function(){return e=this,t=void 0,o=function(){var e,t,n,o,r,i,a;return function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,o&&(r=2&l[0]?o.return:l[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,l[1])).done)return r;switch(o=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,o=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){a.label=l[1];break}if(6===l[0]&&a.label<r[1]){a.label=r[1],r=l;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(l);break}r[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],o=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}}(this,(function(l){switch(l.label){case 0:return e=window.location.pathname,t=e.substr(e.lastIndexOf("/")+1),[4,fetch("/get-comment",{method:"POST",mode:"cors",cache:"no-cache",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({article_url:t,index_start:this.last_comment_index_})})];case 1:return[4,l.sent().json()];case 2:for(n=l.sent(),o=n.comments,r=0,i=o;r<i.length;r++)a=i[r],this.comments_.set(a.comment_id,a);return[2]}}))},new((n=void 0)||(n=Promise))((function(r,i){function a(e){try{s(o.next(e))}catch(e){i(e)}}function l(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((o=o.apply(e,t||[])).next())}));var e,t,n,o},e.prototype.ComputeRootComments=function(){var e=Array.from(this.comments_.keys()).sort((function(e,t){return e-t})),t=new Set;this.root_comments_=[];for(var n=0,o=e;n<o.length;n++){var r=o[n];t.has(r)||(this.root_comments_.push(this.comments_.get(r)),this.VisitAllChildComments(r,t))}this.root_comments_=this.root_comments_.reverse()},e.prototype.VisitAllChildComments=function(e,t){var n=this.comments_.get(e);if(n){t.add(e);for(var o=0,r=n.reply_ids||[];o<r.length;o++){var i=r[o];this.VisitAllChildComments(i,t)}}},e.prototype.CreateCommentList=function(){for(var e=[],t=0,n=this.root_comments_;t<n.length;t++){var o=n[t];e.push(this.CreateComment(o.comment_id))}return e.flat()},e.prototype.CreateComment=function(e){var t,n=this.comments_.get(e);if(n){var o=document.createElement("li");o.classList.add("comment");var r=document.createElement("div");r.classList.add("comment-profile");var i=document.createElement("img");n.image_link?(i.src=n.image_link,i.alt="프로필 사진"):(i.src="./img/unknown_person.png",i.alt="프로필 사진 없음"),r.appendChild(i),o.appendChild(r);var a=document.createElement("div");a.classList.add("comment-info");var l=document.createElement("div");l.classList.add("comment-header");var s=function(e,t){var n=document.createElement("span");return n.classList.add(e),n.textContent=t,n};l.appendChild(s("comment-author",n.author_name||"")),l.appendChild(s("comment-date",n.comment_date||"")),a.appendChild(l);var c=document.createElement("div");c.classList.add("comment-content"),c.textContent=n.content,a.appendChild(c);var d=document.createElement("div");if(d.classList.add("comment-action"),d.id="comment-id-"+e,d.appendChild(s("comment-upvote","추천")),d.appendChild(s("comment-reply","답글")),d.appendChild(s("comment-delete","답글 삭제")),a.appendChild(d),o.appendChild(a),!(null===(t=n.reply_ids)||void 0===t?void 0:t.length))return[o];var h=document.createElement("ul");h.classList.add("comment-list");for(var u=0,m=n.reply_ids;u<m.length;u++)for(var p=m[u],_=0,f=this.CreateComment(p);_<f.length;_++){var v=f[_];h.append(v)}return[o,h]}},e}(),t=function(){function e(){this.last_position=window.scrollY,this.time_to_update_toc=!0,this.scroll_down_event_handlers=[],this.scroll_up_event_handlers=[],this.InstallScrollEventHandler()}return e.prototype.InstallScrollEventHandler=function(){var e=this;window.addEventListener("scroll",(function(t){e.time_to_update_toc&&(window.requestAnimationFrame((function(){if(e.time_to_update_toc=!0,e.last_position>window.scrollY)for(var t=0,n=e.scroll_up_event_handlers;t<n.length;t++)(0,n[t])();else for(var o=0,r=e.scroll_down_event_handlers;o<r.length;o++)(0,r[o])();e.last_position=window.scrollY})),e.time_to_update_toc=!1)}))},e.prototype.RegisterScrollUpHandler=function(e){this.scroll_up_event_handlers.push(e)},e.prototype.RegisterScrollDownHandler=function(e){this.scroll_down_event_handlers.push(e)},e}();function n(e){for(var t=0;t<e.length&&" "==e[t];t++);return e.substring(t)}var o=function(){function e(){this.toc_headers_=[],this.time_to_update_toc=!0,this.prev_highlighted=0,this.FetchHeaders()}return e.prototype.FetchHeaders=function(){for(var e,t=0,o=document.querySelectorAll(".header-general");t<o.length;t++){var r=o[t],i=n(r.innerText),a="h"!=(e=r.tagName)[0]&&"H"!=e[0]?-1:parseInt(e.substring(1)),l=r.id,s=r.getBoundingClientRect().top+window.scrollY;this.toc_headers_.push({header_name:i,header_tag:a,header_id:l,header_pos:s,header_elem_link:null})}},e.prototype.RecursiveTOCCreator=function(e,t,n){for(var o=null,i=t;i<this.toc_headers_.length;i++){var a=this.toc_headers_[i];if(a.header_tag<n)return i;if(a.header_tag>n){var l=document.createElement("ol");l.className="toc-list",o.appendChild(l),i=this.RecursiveTOCCreator(l,i,a.header_tag),i--}else{var s=r(a);a.header_elem_link=s.firstChild,e.appendChild(s),o=s}}return i},e.prototype.CreateTOCList=function(){var e=document.querySelector(".toc-list");null!=e&&(this.RecursiveTOCCreator(e,0,this.toc_headers_[0].header_tag),this.InstallTOCEventHandlers())},e.prototype.InstallTOCEventHandlers=function(){var e=this;window.addEventListener("scroll",(function(){var t=window.scrollY;e.time_to_update_toc&&(window.requestAnimationFrame((function(){e.time_to_update_toc=!0;var n=e.GetCurrentActiveTOCItem(t);e.HighlightActiveItem(n)})),e.time_to_update_toc=!1)}))},e.prototype.HighlightActiveItem=function(e){this.toc_headers_[this.prev_highlighted].header_elem_link.className="toc-item-link",this.toc_headers_[e].header_elem_link.className="toc-item-link toc-active-item",this.prev_highlighted=e},e.prototype.InstallLinkClickHandler=function(){for(var e=function(e){e.header_elem_link.onclick=function(t){window.scrollTo(0,e.header_pos-150),console.log(e.header_pos-150)}},t=0,n=this.toc_headers_;t<n.length;t++)e(n[t])},e.prototype.GetCurrentActiveTOCItem=function(e){if(e<this.toc_headers_[0].header_pos)return 0;for(var t,n=0;n<this.toc_headers_.length&&n!=this.toc_headers_.length-1;n++)if(this.toc_headers_[n].header_pos<=e&&e<this.toc_headers_[n+1].header_pos)return e-this.toc_headers_[n].header_pos>this.toc_headers_[n+1].header_pos-e&&(void 0,(t=this.toc_headers_[n+1].header_elem_link.getBoundingClientRect()).top>=0&&t.left>=0&&t.right<=(window.innerWidth||document.documentElement.clientWidth)&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight))?n+1:n;return n},e}();function r(e){var t=document.createElement("li");t.className="toc-list-item";var n=document.createElement("span");return n.className="toc-item-link",n.textContent=e.header_name,t.appendChild(n),t}function i(){return n=this,r=void 0,a=function(){var n,r,i,a;return function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,o&&(r=2&l[0]?o.return:l[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,l[1])).done)return r;switch(o=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,o=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){a.label=l[1];break}if(6===l[0]&&a.label<r[1]){a.label=r[1],r=l;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(l);break}r[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],o=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}}(this,(function(l){switch(l.label){case 0:return(s=new o).CreateTOCList(),s.InstallLinkClickHandler(),(new t).RegisterScrollUpHandler((function(){})),[4,(n=new e).LoadComments()];case 1:for(l.sent(),n.ComputeRootComments(),r=0,i=n.CreateCommentList();r<i.length;r++)a=i[r],console.log(a.innerHTML);return console.log(n.CreateCommentList()),[2]}var s}))},new((i=void 0)||(i=Promise))((function(e,t){function o(e){try{s(a.next(e))}catch(e){t(e)}}function l(e){try{s(a.throw(e))}catch(e){t(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,l)}s((a=a.apply(n,r||[])).next())}));var n,r,i,a}window.onload=function(){i()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,